name: Canary Deploy for Lambda
run-name: ${{ github.actor }} start workflow
on:
  push:
    branches:
      - main

jobs:
  deploy-canary-lambda:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Package Lambda Code
        working-directory: ./functions
        run: |
          zip -r ../lambda_package.zip .  

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      - name: Update Lambda Function Code
        run: |
          aws lambda update-function-code \
            --function-name MyLambdaFunctionCanary \
            --zip-file fileb://lambda_package.zip

      - name: Publish New Version
        run: |
          sleep 10 
          VERSION=$(aws lambda publish-version --function-name MyLambdaFunctionCanary --query 'Version' --output text)
          echo VERSION=$VERSION >> $GITHUB_ENV

      - name: Configure Canary Deployment
        run: |
          STABLE_VERSION=$(aws lambda get-alias --function-name MyLambdaFunctionCanary --name prod --query 'FunctionVersion' --output text)
          
          aws lambda update-alias \
            --function-name MyLambdaFunctionCanary \
            --name prod \
            --function-version $STABLE_VERSION \
            --routing-config '{"AdditionalVersionWeights": {"${{ env.VERSION }}": 0.1}}'

      - name: Monitor Canary Stability
        run: |
          echo "Monitoring Canary Deployment for 2 minutes..."
          sleep 120
          
          # Filtrar m√©tricas por alias "prod"
          ALARM_STATE=$(aws cloudwatch get-metric-data \
            --metric-data-queries '[{
              "Id":"errorsCheck",
              "MetricStat":{
                "Metric":{
                  "Namespace":"AWS/Lambda",
                  "MetricName":"Errors",
                  "Dimensions":[
                    {"Name":"FunctionName", "Value":"MyLambdaFunctionCanary"},
                    {"Name":"Resource", "Value":"MyLambdaFunctionCanary:${{ env.VERSION }}"}
                  ]
                },
                "Period":60,
                "Stat":"Sum"
              }
            }]' \
            --start-time $(date -u -d "-2 minutes" +"%Y-%m-%dT%H:%M:%SZ") \
            --end-time $(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --query 'MetricDataResults[0].Values[0]' \
            --output text)

          if [[ -z "$ALARM_STATE" || "$ALARM_STATE" -gt 0 ]]; then
            echo "Errors detected in Canary Deployment! Rolling back to stable version..."
            aws lambda update-alias \
              --function-name MyLambdaFunctionCanary \
              --name prod \
              --function-version $STABLE_VERSION \
              --routing-config '{"AdditionalVersionWeights": {}}'
            exit 1
          else
            echo "No errors detected. Canary deployment is stable."
          fi

      - name: Finalize Canary Deployment
        if: success()
        run: |
          aws lambda update-alias \
            --function-name MyLambdaFunctionCanary \
            --name prod \
            --function-version ${{ env.VERSION }} \
            --routing-config '{"AdditionalVersionWeights": {}}'