name: Canary Deploy for Lambda
run-name: ${{ github.actor }} start workflow
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Package Lambda Code
        working-directory: ./functions
        run: |
          zip -r ../lambda_package.zip .  

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      - name: Check if Lambda Function Exists
        id: check_lambda
        run: |
          if aws lambda get-function --function-name MyLambdaFunction; then
            echo "Function exists"
            echo "::set-output name=exists::true"
          else
            echo "Function does not exist"
            echo "::set-output name=exists::false"
          fi


      - name: Update Lambda Function Code
        if: steps.check_lambda.outputs.exists == 'true'
        run: |
            aws lambda update-function-code \
              --function-name MyLambdaFunction \
              --zip-file fileb://lambda_package.zip

      - name: Create Lambda Function
        if: steps.check_lambda.outputs.exists == 'false'
        run: |
            aws lambda create-function \
              --function-name MyLambdaFunction \
              --zip-file fileb://lambda_package.zip \
              --handler lambda_function.lambda_handler \
              --runtime python3.12
    
      - name: Check if function is active
        run: |
          STATUS=$(aws lambda get-function --function-name MyLambdaFunction --query 'Configuration.State' --output text)
          if [ "$STATUS" != "Active" ]; then
            echo "Function is not active, exiting."
            exit 1
          fi

      - name: Publish New Version
        run: |
          VERSION=$(aws lambda publish-version --function-name MyLambdaFunction --query 'Version' --output text)
          echo VERSION=$VERSION >> $GITHUB_ENV

      - name: Configure Canary Deployment
        run: |
          STABLE_VERSION=$(aws lambda get-alias --function-name MyLambdaFunction --name live --query 'FunctionVersion' --output text)
          
          aws lambda update-alias \
            --function-name MyLambdaFunction \
            --name live \
            --function-version $STABLE_VERSION \
            --routing-config '{"AdditionalVersionWeights": {"${{ env.VERSION }}": 0.1}}'
        
      - name: Finalize Canary Deployment
        run: |
          echo "Waiting for 1 minutes..."
          sleep 60 
          aws lambda update-alias \
            --function-name MyLambdaFunction \
            --name live \
            --function-version ${{ env.VERSION }} \
            --routing-config '{"AdditionalVersionWeights": {}}'